{"ast":null,"code":"'use strict';\n\nvar dns = require('dns');\n\nvar defaults = require('./defaults');\n\nvar parse = require('pg-connection-string').parse; // parses a connection string\n\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()];\n  } else if (envVar === false) {// do nothing ... use false\n  } else {\n    envVar = process.env[envVar];\n  }\n\n  return config[key] || envVar || defaults[key];\n};\n\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false;\n\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true;\n\n    case 'no-verify':\n      return {\n        rejectUnauthorized: false\n      };\n  }\n\n  return defaults.ssl;\n}; // Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\n\n\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\";\n};\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName];\n\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value));\n  }\n};\n\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {}; // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString));\n    }\n\n    this.user = val('user', config);\n    this.database = val('database', config);\n\n    if (this.database === undefined) {\n      this.database = this.user;\n    }\n\n    this.port = parseInt(val('port', config), 10);\n    this.host = val('host', config); // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config)\n    });\n    this.binary = val('binary', config);\n    this.options = val('options', config);\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl;\n\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true;\n      }\n    } // support passing in ssl=no-verify via connection string\n\n\n    if (this.ssl === 'no-verify') {\n      this.ssl = {\n        rejectUnauthorized: false\n      };\n    }\n\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false\n      });\n    }\n\n    this.client_encoding = val('client_encoding', config);\n    this.replication = val('replication', config); // a domain socket begins with '/'\n\n    this.isDomainSocket = !(this.host || '').indexOf('/');\n    this.application_name = val('application_name', config, 'PGAPPNAME');\n    this.fallback_application_name = val('fallback_application_name', config, false);\n    this.statement_timeout = val('statement_timeout', config, false);\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false);\n    this.query_timeout = val('query_timeout', config, false);\n\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0;\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000);\n    }\n\n    if (config.keepAlive === false) {\n      this.keepalives = 0;\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1;\n    }\n\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000);\n    }\n  }\n\n  getLibpqConnectionString(cb) {\n    var params = [];\n    add(params, this, 'user');\n    add(params, this, 'password');\n    add(params, this, 'port');\n    add(params, this, 'application_name');\n    add(params, this, 'fallback_application_name');\n    add(params, this, 'connect_timeout');\n    add(params, this, 'options');\n    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? {\n      sslmode: this.ssl\n    } : {};\n    add(params, ssl, 'sslmode');\n    add(params, ssl, 'sslca');\n    add(params, ssl, 'sslkey');\n    add(params, ssl, 'sslcert');\n    add(params, ssl, 'sslrootcert');\n\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database));\n    }\n\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication));\n    }\n\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host));\n    }\n\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '));\n    }\n\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding));\n    }\n\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null);\n      params.push('hostaddr=' + quoteParamValue(address));\n      return cb(null, params.join(' '));\n    });\n  }\n\n}\n\nmodule.exports = ConnectionParameters;","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/node_modules/pg/lib/connection-parameters.js"],"names":["dns","require","defaults","parse","val","key","config","envVar","undefined","process","env","toUpperCase","readSSLConfigFromEnvironment","PGSSLMODE","rejectUnauthorized","ssl","quoteParamValue","value","replace","add","params","paramName","push","ConnectionParameters","constructor","connectionString","Object","assign","user","database","port","parseInt","host","defineProperty","configurable","enumerable","writable","binary","options","client_encoding","replication","isDomainSocket","indexOf","application_name","fallback_application_name","statement_timeout","idle_in_transaction_session_timeout","query_timeout","connectionTimeoutMillis","connect_timeout","PGCONNECT_TIMEOUT","Math","floor","keepAlive","keepalives","keepAliveInitialDelayMillis","keepalives_idle","getLibpqConnectionString","cb","sslmode","join","lookup","err","address","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,sBAAD,CAAP,CAAgCE,KAA5C,C,CAAkD;;;AAElD,IAAIC,GAAG,GAAG,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACvC,MAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxBD,IAAAA,MAAM,GAAGE,OAAO,CAACC,GAAR,CAAY,OAAOL,GAAG,CAACM,WAAJ,EAAnB,CAAT;AACD,GAFD,MAEO,IAAIJ,MAAM,KAAK,KAAf,EAAsB,CAC3B;AACD,GAFM,MAEA;AACLA,IAAAA,MAAM,GAAGE,OAAO,CAACC,GAAR,CAAYH,MAAZ,CAAT;AACD;;AAED,SAAOD,MAAM,CAACD,GAAD,CAAN,IAAeE,MAAf,IAAyBL,QAAQ,CAACG,GAAD,CAAxC;AACD,CAVD;;AAYA,IAAIO,4BAA4B,GAAG,YAAY;AAC7C,UAAQH,OAAO,CAACC,GAAR,CAAYG,SAApB;AACE,SAAK,SAAL;AACE,aAAO,KAAP;;AACF,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,WAAL;AACA,SAAK,aAAL;AACE,aAAO,IAAP;;AACF,SAAK,WAAL;AACE,aAAO;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAP;AATJ;;AAWA,SAAOZ,QAAQ,CAACa,GAAhB;AACD,CAbD,C,CAeA;;;AACA,IAAIC,eAAe,GAAG,UAAUC,KAAV,EAAiB;AACrC,SAAO,MAAM,CAAC,KAAKA,KAAN,EAAaC,OAAb,CAAqB,KAArB,EAA4B,MAA5B,EAAoCA,OAApC,CAA4C,IAA5C,EAAkD,KAAlD,CAAN,GAAiE,GAAxE;AACD,CAFD;;AAIA,IAAIC,GAAG,GAAG,UAAUC,MAAV,EAAkBd,MAAlB,EAA0Be,SAA1B,EAAqC;AAC7C,MAAIJ,KAAK,GAAGX,MAAM,CAACe,SAAD,CAAlB;;AACA,MAAIJ,KAAK,KAAKT,SAAV,IAAuBS,KAAK,KAAK,IAArC,EAA2C;AACzCG,IAAAA,MAAM,CAACE,IAAP,CAAYD,SAAS,GAAG,GAAZ,GAAkBL,eAAe,CAACC,KAAD,CAA7C;AACD;AACF,CALD;;AAOA,MAAMM,oBAAN,CAA2B;AACzBC,EAAAA,WAAW,CAAClB,MAAD,EAAS;AAClB;AACAA,IAAAA,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,GAA6BH,KAAK,CAACG,MAAD,CAAlC,GAA6CA,MAAM,IAAI,EAAhE,CAFkB,CAIlB;AACA;;AACA,QAAIA,MAAM,CAACmB,gBAAX,EAA6B;AAC3BnB,MAAAA,MAAM,GAAGoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,MAAlB,EAA0BH,KAAK,CAACG,MAAM,CAACmB,gBAAR,CAA/B,CAAT;AACD;;AAED,SAAKG,IAAL,GAAYxB,GAAG,CAAC,MAAD,EAASE,MAAT,CAAf;AACA,SAAKuB,QAAL,GAAgBzB,GAAG,CAAC,UAAD,EAAaE,MAAb,CAAnB;;AAEA,QAAI,KAAKuB,QAAL,KAAkBrB,SAAtB,EAAiC;AAC/B,WAAKqB,QAAL,GAAgB,KAAKD,IAArB;AACD;;AAED,SAAKE,IAAL,GAAYC,QAAQ,CAAC3B,GAAG,CAAC,MAAD,EAASE,MAAT,CAAJ,EAAsB,EAAtB,CAApB;AACA,SAAK0B,IAAL,GAAY5B,GAAG,CAAC,MAAD,EAASE,MAAT,CAAf,CAlBkB,CAoBlB;AACA;;AACAoB,IAAAA,MAAM,CAACO,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,EAAwC;AACtCC,MAAAA,YAAY,EAAE,IADwB;AAEtCC,MAAAA,UAAU,EAAE,KAF0B;AAGtCC,MAAAA,QAAQ,EAAE,IAH4B;AAItCnB,MAAAA,KAAK,EAAEb,GAAG,CAAC,UAAD,EAAaE,MAAb;AAJ4B,KAAxC;AAOA,SAAK+B,MAAL,GAAcjC,GAAG,CAAC,QAAD,EAAWE,MAAX,CAAjB;AACA,SAAKgC,OAAL,GAAelC,GAAG,CAAC,SAAD,EAAYE,MAAZ,CAAlB;AAEA,SAAKS,GAAL,GAAW,OAAOT,MAAM,CAACS,GAAd,KAAsB,WAAtB,GAAoCH,4BAA4B,EAAhE,GAAqEN,MAAM,CAACS,GAAvF;;AAEA,QAAI,OAAO,KAAKA,GAAZ,KAAoB,QAAxB,EAAkC;AAChC,UAAI,KAAKA,GAAL,KAAa,MAAjB,EAAyB;AACvB,aAAKA,GAAL,GAAW,IAAX;AACD;AACF,KAtCiB,CAuClB;;;AACA,QAAI,KAAKA,GAAL,KAAa,WAAjB,EAA8B;AAC5B,WAAKA,GAAL,GAAW;AAAED,QAAAA,kBAAkB,EAAE;AAAtB,OAAX;AACD;;AACD,QAAI,KAAKC,GAAL,IAAY,KAAKA,GAAL,CAASV,GAAzB,EAA8B;AAC5BqB,MAAAA,MAAM,CAACO,cAAP,CAAsB,KAAKlB,GAA3B,EAAgC,KAAhC,EAAuC;AACrCoB,QAAAA,UAAU,EAAE;AADyB,OAAvC;AAGD;;AAED,SAAKI,eAAL,GAAuBnC,GAAG,CAAC,iBAAD,EAAoBE,MAApB,CAA1B;AACA,SAAKkC,WAAL,GAAmBpC,GAAG,CAAC,aAAD,EAAgBE,MAAhB,CAAtB,CAlDkB,CAmDlB;;AACA,SAAKmC,cAAL,GAAsB,CAAC,CAAC,KAAKT,IAAL,IAAa,EAAd,EAAkBU,OAAlB,CAA0B,GAA1B,CAAvB;AAEA,SAAKC,gBAAL,GAAwBvC,GAAG,CAAC,kBAAD,EAAqBE,MAArB,EAA6B,WAA7B,CAA3B;AACA,SAAKsC,yBAAL,GAAiCxC,GAAG,CAAC,2BAAD,EAA8BE,MAA9B,EAAsC,KAAtC,CAApC;AACA,SAAKuC,iBAAL,GAAyBzC,GAAG,CAAC,mBAAD,EAAsBE,MAAtB,EAA8B,KAA9B,CAA5B;AACA,SAAKwC,mCAAL,GAA2C1C,GAAG,CAAC,qCAAD,EAAwCE,MAAxC,EAAgD,KAAhD,CAA9C;AACA,SAAKyC,aAAL,GAAqB3C,GAAG,CAAC,eAAD,EAAkBE,MAAlB,EAA0B,KAA1B,CAAxB;;AAEA,QAAIA,MAAM,CAAC0C,uBAAP,KAAmCxC,SAAvC,EAAkD;AAChD,WAAKyC,eAAL,GAAuBxC,OAAO,CAACC,GAAR,CAAYwC,iBAAZ,IAAiC,CAAxD;AACD,KAFD,MAEO;AACL,WAAKD,eAAL,GAAuBE,IAAI,CAACC,KAAL,CAAW9C,MAAM,CAAC0C,uBAAP,GAAiC,IAA5C,CAAvB;AACD;;AAED,QAAI1C,MAAM,CAAC+C,SAAP,KAAqB,KAAzB,EAAgC;AAC9B,WAAKC,UAAL,GAAkB,CAAlB;AACD,KAFD,MAEO,IAAIhD,MAAM,CAAC+C,SAAP,KAAqB,IAAzB,EAA+B;AACpC,WAAKC,UAAL,GAAkB,CAAlB;AACD;;AAED,QAAI,OAAOhD,MAAM,CAACiD,2BAAd,KAA8C,QAAlD,EAA4D;AAC1D,WAAKC,eAAL,GAAuBL,IAAI,CAACC,KAAL,CAAW9C,MAAM,CAACiD,2BAAP,GAAqC,IAAhD,CAAvB;AACD;AACF;;AAEDE,EAAAA,wBAAwB,CAACC,EAAD,EAAK;AAC3B,QAAItC,MAAM,GAAG,EAAb;AACAD,IAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,MAAf,CAAH;AACAD,IAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,UAAf,CAAH;AACAD,IAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,MAAf,CAAH;AACAD,IAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,kBAAf,CAAH;AACAD,IAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,2BAAf,CAAH;AACAD,IAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,iBAAf,CAAH;AACAD,IAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,SAAf,CAAH;AAEA,QAAIL,GAAG,GAAG,OAAO,KAAKA,GAAZ,KAAoB,QAApB,GAA+B,KAAKA,GAApC,GAA0C,KAAKA,GAAL,GAAW;AAAE4C,MAAAA,OAAO,EAAE,KAAK5C;AAAhB,KAAX,GAAmC,EAAvF;AACAI,IAAAA,GAAG,CAACC,MAAD,EAASL,GAAT,EAAc,SAAd,CAAH;AACAI,IAAAA,GAAG,CAACC,MAAD,EAASL,GAAT,EAAc,OAAd,CAAH;AACAI,IAAAA,GAAG,CAACC,MAAD,EAASL,GAAT,EAAc,QAAd,CAAH;AACAI,IAAAA,GAAG,CAACC,MAAD,EAASL,GAAT,EAAc,SAAd,CAAH;AACAI,IAAAA,GAAG,CAACC,MAAD,EAASL,GAAT,EAAc,aAAd,CAAH;;AAEA,QAAI,KAAKc,QAAT,EAAmB;AACjBT,MAAAA,MAAM,CAACE,IAAP,CAAY,YAAYN,eAAe,CAAC,KAAKa,QAAN,CAAvC;AACD;;AACD,QAAI,KAAKW,WAAT,EAAsB;AACpBpB,MAAAA,MAAM,CAACE,IAAP,CAAY,iBAAiBN,eAAe,CAAC,KAAKwB,WAAN,CAA5C;AACD;;AACD,QAAI,KAAKR,IAAT,EAAe;AACbZ,MAAAA,MAAM,CAACE,IAAP,CAAY,UAAUN,eAAe,CAAC,KAAKgB,IAAN,CAArC;AACD;;AACD,QAAI,KAAKS,cAAT,EAAyB;AACvB,aAAOiB,EAAE,CAAC,IAAD,EAAOtC,MAAM,CAACwC,IAAP,CAAY,GAAZ,CAAP,CAAT;AACD;;AACD,QAAI,KAAKrB,eAAT,EAA0B;AACxBnB,MAAAA,MAAM,CAACE,IAAP,CAAY,qBAAqBN,eAAe,CAAC,KAAKuB,eAAN,CAAhD;AACD;;AACDvC,IAAAA,GAAG,CAAC6D,MAAJ,CAAW,KAAK7B,IAAhB,EAAsB,UAAU8B,GAAV,EAAeC,OAAf,EAAwB;AAC5C,UAAID,GAAJ,EAAS,OAAOJ,EAAE,CAACI,GAAD,EAAM,IAAN,CAAT;AACT1C,MAAAA,MAAM,CAACE,IAAP,CAAY,cAAcN,eAAe,CAAC+C,OAAD,CAAzC;AACA,aAAOL,EAAE,CAAC,IAAD,EAAOtC,MAAM,CAACwC,IAAP,CAAY,GAAZ,CAAP,CAAT;AACD,KAJD;AAKD;;AAnHwB;;AAsH3BI,MAAM,CAACC,OAAP,GAAiB1C,oBAAjB","sourcesContent":["'use strict'\n\nvar dns = require('dns')\n\nvar defaults = require('./defaults')\n\nvar parse = require('pg-connection-string').parse // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] || envVar || defaults[key]\n}\n\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n    case 'no-verify':\n      return { rejectUnauthorized: false }\n  }\n  return defaults.ssl\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {}\n\n    // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString))\n    }\n\n    this.user = val('user', config)\n    this.database = val('database', config)\n\n    if (this.database === undefined) {\n      this.database = this.user\n    }\n\n    this.port = parseInt(val('port', config), 10)\n    this.host = val('host', config)\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config),\n    })\n\n    this.binary = val('binary', config)\n    this.options = val('options', config)\n\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl\n\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true\n      }\n    }\n    // support passing in ssl=no-verify via connection string\n    if (this.ssl === 'no-verify') {\n      this.ssl = { rejectUnauthorized: false }\n    }\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.client_encoding = val('client_encoding', config)\n    this.replication = val('replication', config)\n    // a domain socket begins with '/'\n    this.isDomainSocket = !(this.host || '').indexOf('/')\n\n    this.application_name = val('application_name', config, 'PGAPPNAME')\n    this.fallback_application_name = val('fallback_application_name', config, false)\n    this.statement_timeout = val('statement_timeout', config, false)\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)\n    this.query_timeout = val('query_timeout', config, false)\n\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n    }\n\n    if (config.keepAlive === false) {\n      this.keepalives = 0\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1\n    }\n\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n    }\n  }\n\n  getLibpqConnectionString(cb) {\n    var params = []\n    add(params, this, 'user')\n    add(params, this, 'password')\n    add(params, this, 'port')\n    add(params, this, 'application_name')\n    add(params, this, 'fallback_application_name')\n    add(params, this, 'connect_timeout')\n    add(params, this, 'options')\n\n    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n    add(params, ssl, 'sslmode')\n    add(params, ssl, 'sslca')\n    add(params, ssl, 'sslkey')\n    add(params, ssl, 'sslcert')\n    add(params, ssl, 'sslrootcert')\n\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database))\n    }\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication))\n    }\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host))\n    }\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '))\n    }\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n    }\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null)\n      params.push('hostaddr=' + quoteParamValue(address))\n      return cb(null, params.join(' '))\n    })\n  }\n}\n\nmodule.exports = ConnectionParameters\n"]},"metadata":{},"sourceType":"script"}