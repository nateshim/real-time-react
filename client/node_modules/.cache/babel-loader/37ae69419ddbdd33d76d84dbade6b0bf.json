{"ast":null,"code":"const Pool = require('pg').Pool;\n\nconst pool = new Pool({\n  user: process.env.POOL_USER,\n  host: process.env.POOL_HOST,\n  database: process.env.POOL_DATABASE,\n  password: process.env.POOL_PASSWORD,\n  port: process.env.POOL_PORT\n});\n\nconst getUserFromID = body => {\n  console.log('we are here');\n  return new Promise(function (resolve, reject) {\n    const {\n      user_id\n    } = body;\n    pool.query('SELECT * FROM users WHERE user_id = ($1)', [user_id], (error, results) => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve(results.rows);\n    });\n  });\n};\n\nconst getUser = body => {\n  return new Promise(function (resolve, reject) {\n    const {\n      email,\n      password\n    } = body;\n    pool.query('SELECT * FROM users WHERE email = ($1) AND encryptedpassword = ($2)', [email, password], (error, results) => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve(results.rows);\n    });\n  });\n};\n\nconst getUsers = () => {\n  return new Promise(function (resolve, reject) {\n    pool.query('SELECT * FROM users', (error, results) => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve(results.rows);\n    });\n  });\n};\n\nconst createUser = body => {\n  return new Promise(function (resolve, reject) {\n    const {\n      username,\n      email,\n      password\n    } = body;\n    const spriteid = 0;\n    pool.query('SELECT * FROM users WHERE username = $1', [username], (error, results) => {\n      if (error) {\n        reject(error);\n      }\n\n      if (results.rows.length !== 0) {\n        resolve('username');\n      } else {\n        pool.query('SELECT * FROM users WHERE email = $1', [email], (error, results) => {\n          if (error) {\n            reject(error);\n          }\n\n          if (results.rows.length !== 0) {\n            resolve('email');\n          } else {\n            pool.query('INSERT INTO users (username, email, encryptedpassword, spriteid) VALUES ($1, $2, $3, $4)', [username, email, password, spriteid], (error, results) => {\n              if (error) {\n                reject(error);\n              }\n\n              resolve(results.rows[0]);\n            });\n          }\n        });\n      }\n    });\n  });\n};\n\nmodule.exports = {\n  getUserFromID,\n  getUser,\n  getUsers,\n  createUser\n};","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/client/src/models/userModel.js"],"names":["Pool","require","pool","user","process","env","POOL_USER","host","POOL_HOST","database","POOL_DATABASE","password","POOL_PASSWORD","port","POOL_PORT","getUserFromID","body","console","log","Promise","resolve","reject","user_id","query","error","results","rows","getUser","email","getUsers","createUser","username","spriteid","length","module","exports"],"mappings":"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","sourcesContent":["const Pool = require('pg').Pool\nconst pool = new Pool({\n    user: process.env.POOL_USER,\n    host: process.env.POOL_HOST,\n    database: process.env.POOL_DATABASE,\n    password: process.env.POOL_PASSWORD,\n    port: process.env.POOL_PORT,\n});\nconst getUserFromID = (body) => {\n    console.log('we are here')\n    return new Promise(function(resolve, reject) {\n        const {user_id} = body;\n        pool.query('SELECT * FROM users WHERE user_id = ($1)', [user_id], (error, results) => {\n            if (error) {\n                reject(error)\n            }\n            resolve(results.rows)\n        })\n    })\n}\nconst getUser = (body) => {\n    return new Promise(function(resolve, reject) {\n        const {email, password} = body;\n        pool.query('SELECT * FROM users WHERE email = ($1) AND encryptedpassword = ($2)', [email, password], (error, results) => {\n            if (error) {\n                reject(error)\n            }\n            resolve(results.rows)\n        })\n    })\n}\nconst getUsers = () => {\n    return new Promise(function(resolve, reject) {\n        pool.query('SELECT * FROM users', (error, results) => {\n            if (error) {\n                reject(error)\n            }\n            resolve(results.rows);\n        })\n    })\n}\n\nconst createUser = (body) => {\n    return new Promise(function(resolve, reject) {\n        const {username, email, password } = body;\n        const spriteid = 0;\n        pool.query('SELECT * FROM users WHERE username = $1', [username], (error, results) => {\n            if (error) {\n                reject(error)\n            }\n            if (results.rows.length !== 0) {\n                resolve('username')\n            } else {\n                pool.query('SELECT * FROM users WHERE email = $1', [email], (error, results) => {\n                    if (error) {\n                        reject(error)\n                    }\n                    if (results.rows.length !== 0) {\n                        resolve('email')\n                    } else {\n                        pool.query('INSERT INTO users (username, email, encryptedpassword, spriteid) VALUES ($1, $2, $3, $4)', [username, email, password, spriteid], (error, results) => {\n                            if (error) {\n                                reject(error)\n                            }\n                            resolve(results.rows[0])\n                        })\n                    }\n                })\n            }\n        })\n    })\n}\n\nmodule.exports = {\n    getUserFromID,\n    getUser,\n    getUsers,\n    createUser,\n}"]},"metadata":{},"sourceType":"module"}