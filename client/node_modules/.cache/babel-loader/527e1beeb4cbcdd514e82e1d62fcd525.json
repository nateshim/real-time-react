{"ast":null,"code":"import { getLineWithColor } from '../utils';\nexport default class Pencil {\n  constructor(color) {\n    this.color = color;\n    this.dragging = false;\n  }\n\n  handlePointerUp() {\n    this.dragging = false;\n  }\n\n  handlePointerDown(position, editor) {\n    this.dragging = true;\n    this.prevPosition = position;\n    editor.set([{\n      x: position.x,\n      y: position.y,\n      color: this.color\n    }]);\n  }\n\n  handlePointerMove(position, editor) {\n    if (this.dragging) {\n      const line = getLineWithColor(this.prevPosition.x, this.prevPosition.y, position.x, position.y, this.color);\n      this.prevPosition = position;\n      editor.set(line);\n      editor.history.squash();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/real-time-react/client/node_modules/@curtishughes/pixel-editor/dist/tools/Pencil.js"],"names":["getLineWithColor","Pencil","constructor","color","dragging","handlePointerUp","handlePointerDown","position","editor","prevPosition","set","x","y","handlePointerMove","line","history","squash"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC;AACA,eAAe,MAAMC,MAAN,CAAa;AACxBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,SAAKD,QAAL,GAAgB,KAAhB;AACH;;AACDE,EAAAA,iBAAiB,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAChC,SAAKJ,QAAL,GAAgB,IAAhB;AACA,SAAKK,YAAL,GAAoBF,QAApB;AACAC,IAAAA,MAAM,CAACE,GAAP,CAAW,CAAC;AAAEC,MAAAA,CAAC,EAAEJ,QAAQ,CAACI,CAAd;AAAiBC,MAAAA,CAAC,EAAEL,QAAQ,CAACK,CAA7B;AAAgCT,MAAAA,KAAK,EAAE,KAAKA;AAA5C,KAAD,CAAX;AACH;;AACDU,EAAAA,iBAAiB,CAACN,QAAD,EAAWC,MAAX,EAAmB;AAChC,QAAI,KAAKJ,QAAT,EAAmB;AACf,YAAMU,IAAI,GAAGd,gBAAgB,CAAC,KAAKS,YAAL,CAAkBE,CAAnB,EAAsB,KAAKF,YAAL,CAAkBG,CAAxC,EAA2CL,QAAQ,CAACI,CAApD,EAAuDJ,QAAQ,CAACK,CAAhE,EAAmE,KAAKT,KAAxE,CAA7B;AACA,WAAKM,YAAL,GAAoBF,QAApB;AACAC,MAAAA,MAAM,CAACE,GAAP,CAAWI,IAAX;AACAN,MAAAA,MAAM,CAACO,OAAP,CAAeC,MAAf;AACH;AACJ;;AApBuB","sourcesContent":["import { getLineWithColor } from '../utils';\nexport default class Pencil {\n    constructor(color) {\n        this.color = color;\n        this.dragging = false;\n    }\n    handlePointerUp() {\n        this.dragging = false;\n    }\n    handlePointerDown(position, editor) {\n        this.dragging = true;\n        this.prevPosition = position;\n        editor.set([{ x: position.x, y: position.y, color: this.color }]);\n    }\n    handlePointerMove(position, editor) {\n        if (this.dragging) {\n            const line = getLineWithColor(this.prevPosition.x, this.prevPosition.y, position.x, position.y, this.color);\n            this.prevPosition = position;\n            editor.set(line);\n            editor.history.squash();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}