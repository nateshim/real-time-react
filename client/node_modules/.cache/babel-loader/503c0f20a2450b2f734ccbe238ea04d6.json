{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst NOOP = function () {};\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate);\n  return i === -1 ? undefined : list.splice(i, 1)[0];\n};\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client;\n    this.idleListener = idleListener;\n    this.timeoutId = timeoutId;\n  }\n\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.');\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return {\n      callback: callback,\n      result: undefined\n    };\n  }\n\n  let rej;\n  let res;\n\n  const cb = function (err, client) {\n    err ? rej(err) : res(client);\n  };\n\n  const result = new Promise(function (resolve, reject) {\n    res = resolve;\n    rej = reject;\n  });\n  return {\n    callback: cb,\n    result: result\n  };\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client;\n    client.removeListener('error', idleListener);\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err);\n    });\n\n    pool._remove(client); // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n\n\n    pool.emit('error', err, client);\n  };\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super();\n    this.options = Object.assign({}, options);\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password\n      });\n    }\n\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false\n      });\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10;\n    this.options.maxUses = this.options.maxUses || Infinity;\n\n    this.log = this.options.log || function () {};\n\n    this.Client = this.options.Client || Client || require('pg').Client;\n    this.Promise = this.options.Promise || global.Promise;\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000;\n    }\n\n    this._clients = [];\n    this._idle = [];\n    this._pendingQueue = [];\n    this._endCallback = undefined;\n    this.ending = false;\n    this.ended = false;\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max;\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue');\n\n    if (this.ended) {\n      this.log('pulse queue ended');\n      return;\n    }\n\n    if (this.ending) {\n      this.log('pulse queue on ending');\n\n      if (this._idle.length) {\n        this._idle.slice().map(item => {\n          this._remove(item.client);\n        });\n      }\n\n      if (!this._clients.length) {\n        this.ended = true;\n\n        this._endCallback();\n      }\n\n      return;\n    } // if we don't have any waiting, do nothing\n\n\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests');\n      return;\n    } // if we don't have any idle clients and we have no more room do nothing\n\n\n    if (!this._idle.length && this._isFull()) {\n      return;\n    }\n\n    const pendingItem = this._pendingQueue.shift();\n\n    if (this._idle.length) {\n      const idleItem = this._idle.pop();\n\n      clearTimeout(idleItem.timeoutId);\n      const client = idleItem.client;\n      const idleListener = idleItem.idleListener;\n      return this._acquireClient(client, pendingItem, idleListener, false);\n    }\n\n    if (!this._isFull()) {\n      return this.newClient(pendingItem);\n    }\n\n    throw new Error('unexpected condition');\n  }\n\n  _remove(client) {\n    const removed = removeWhere(this._idle, item => item.client === client);\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId);\n    }\n\n    this._clients = this._clients.filter(c => c !== client);\n    client.end();\n    this.emit('remove', client);\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool');\n      return cb ? cb(err) : this.Promise.reject(err);\n    }\n\n    const response = promisify(this.Promise, cb);\n    const result = response.result; // if we don't have to connect a new client, don't do so\n\n    if (this._clients.length >= this.options.max || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue());\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback));\n\n        return result;\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid);\n        response.callback(err, res, done);\n      };\n\n      const pendingItem = new PendingItem(queueCallback); // set connection timeout on checking out an existing client\n\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, i => i.callback === queueCallback);\n        pendingItem.timedOut = true;\n        response.callback(new Error('timeout exceeded when trying to connect'));\n      }, this.options.connectionTimeoutMillis);\n\n      this._pendingQueue.push(pendingItem);\n\n      return result;\n    }\n\n    this.newClient(new PendingItem(response.callback));\n    return result;\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options);\n\n    this._clients.push(client);\n\n    const idleListener = makeIdleListener(this, client);\n    this.log('checking client timeout'); // connection timeout logic\n\n    let tid;\n    let timeoutHit = false;\n\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout');\n        timeoutHit = true; // force kill the node driver, and let libpq do its teardown\n\n        client.connection ? client.connection.stream.destroy() : client.end();\n      }, this.options.connectionTimeoutMillis);\n    }\n\n    this.log('connecting new client');\n    client.connect(err => {\n      if (tid) {\n        clearTimeout(tid);\n      }\n\n      client.on('error', idleListener);\n\n      if (err) {\n        this.log('client failed to connect', err); // remove the dead client from our list of clients\n\n        this._clients = this._clients.filter(c => c !== client);\n\n        if (timeoutHit) {\n          err.message = 'Connection terminated due to connection timeout';\n        } // this client wonâ€™t be released, so move on immediately\n\n\n        this._pulseQueue();\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP);\n        }\n      } else {\n        this.log('new client connected');\n        return this._acquireClient(client, pendingItem, idleListener, true);\n      }\n    });\n  } // acquire a client for a pending work item\n\n\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client);\n    }\n\n    this.emit('acquire', client);\n    client.release = this._releaseOnce(client, idleListener);\n    client.removeListener('error', idleListener);\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, err => {\n          if (err) {\n            client.release(err);\n            return pendingItem.callback(err, undefined, NOOP);\n          }\n\n          pendingItem.callback(undefined, client, client.release);\n        });\n      } else {\n        pendingItem.callback(undefined, client, client.release);\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release);\n      } else {\n        client.release();\n      }\n    }\n  } // returns a function that wraps _release and throws if called more than once\n\n\n  _releaseOnce(client, idleListener) {\n    let released = false;\n    return err => {\n      if (released) {\n        throwOnDoubleRelease();\n      }\n\n      released = true;\n\n      this._release(client, idleListener, err);\n    };\n  } // release a client back to the poll, include an error\n  // to remove it from the pool\n\n\n  _release(client, idleListener, err) {\n    client.on('error', idleListener);\n    client._poolUseCount = (client._poolUseCount || 0) + 1; // TODO(bmc): expose a proper, public interface _queryable and _ending\n\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client');\n      }\n\n      this._remove(client);\n\n      this._pulseQueue();\n\n      return;\n    } // idle timeout\n\n\n    let tid;\n\n    if (this.options.idleTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('remove idle client');\n\n        this._remove(client);\n      }, this.options.idleTimeoutMillis);\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid));\n\n    this._pulseQueue();\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text);\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'));\n      });\n      return response.result;\n    } // allow plain text query without values\n\n\n    if (typeof values === 'function') {\n      cb = values;\n      values = undefined;\n    }\n\n    const response = promisify(this.Promise, cb);\n    cb = response.callback;\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err);\n      }\n\n      let clientReleased = false;\n\n      const onError = err => {\n        if (clientReleased) {\n          return;\n        }\n\n        clientReleased = true;\n        client.release(err);\n        cb(err);\n      };\n\n      client.once('error', onError);\n      this.log('dispatching query');\n      client.query(text, values, (err, res) => {\n        this.log('query dispatched');\n        client.removeListener('error', onError);\n\n        if (clientReleased) {\n          return;\n        }\n\n        clientReleased = true;\n        client.release(err);\n\n        if (err) {\n          return cb(err);\n        } else {\n          return cb(undefined, res);\n        }\n      });\n    });\n    return response.result;\n  }\n\n  end(cb) {\n    this.log('ending');\n\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once');\n      return cb ? cb(err) : this.Promise.reject(err);\n    }\n\n    this.ending = true;\n    const promised = promisify(this.Promise, cb);\n    this._endCallback = promised.callback;\n\n    this._pulseQueue();\n\n    return promised.result;\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length;\n  }\n\n  get idleCount() {\n    return this._idle.length;\n  }\n\n  get totalCount() {\n    return this._clients.length;\n  }\n\n}\n\nmodule.exports = Pool;","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/node_modules/pg-pool/index.js"],"names":["EventEmitter","require","NOOP","removeWhere","list","predicate","i","findIndex","undefined","splice","IdleItem","constructor","client","idleListener","timeoutId","PendingItem","callback","throwOnDoubleRelease","Error","promisify","Promise","result","rej","res","cb","err","resolve","reject","makeIdleListener","pool","removeListener","on","log","_remove","emit","Pool","options","Client","Object","assign","defineProperty","configurable","enumerable","writable","value","password","ssl","key","max","poolSize","maxUses","Infinity","global","idleTimeoutMillis","_clients","_idle","_pendingQueue","_endCallback","ending","ended","_isFull","length","_pulseQueue","slice","map","item","pendingItem","shift","idleItem","pop","clearTimeout","_acquireClient","newClient","removed","filter","c","end","connect","response","process","nextTick","connectionTimeoutMillis","push","queueCallback","done","tid","setTimeout","timedOut","timeoutHit","connection","stream","destroy","message","isNew","release","_releaseOnce","verify","released","_release","_poolUseCount","_queryable","_ending","query","text","values","setImmediate","clientReleased","onError","once","promised","waitingCount","idleCount","totalCount","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst EventEmitter = require('events').EventEmitter\n\nconst NOOP = function () {}\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate)\n\n  return i === -1 ? undefined : list.splice(i, 1)[0]\n}\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client\n    this.idleListener = idleListener\n    this.timeoutId = timeoutId\n  }\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback\n  }\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.')\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return { callback: callback, result: undefined }\n  }\n  let rej\n  let res\n  const cb = function (err, client) {\n    err ? rej(err) : res(client)\n  }\n  const result = new Promise(function (resolve, reject) {\n    res = resolve\n    rej = reject\n  })\n  return { callback: cb, result: result }\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client\n\n    client.removeListener('error', idleListener)\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err)\n    })\n    pool._remove(client)\n    // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n    pool.emit('error', err, client)\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super()\n    this.options = Object.assign({}, options)\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password,\n      })\n    }\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10\n    this.options.maxUses = this.options.maxUses || Infinity\n    this.log = this.options.log || function () {}\n    this.Client = this.options.Client || Client || require('pg').Client\n    this.Promise = this.options.Promise || global.Promise\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000\n    }\n\n    this._clients = []\n    this._idle = []\n    this._pendingQueue = []\n    this._endCallback = undefined\n    this.ending = false\n    this.ended = false\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue')\n    if (this.ended) {\n      this.log('pulse queue ended')\n      return\n    }\n    if (this.ending) {\n      this.log('pulse queue on ending')\n      if (this._idle.length) {\n        this._idle.slice().map((item) => {\n          this._remove(item.client)\n        })\n      }\n      if (!this._clients.length) {\n        this.ended = true\n        this._endCallback()\n      }\n      return\n    }\n    // if we don't have any waiting, do nothing\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests')\n      return\n    }\n    // if we don't have any idle clients and we have no more room do nothing\n    if (!this._idle.length && this._isFull()) {\n      return\n    }\n    const pendingItem = this._pendingQueue.shift()\n    if (this._idle.length) {\n      const idleItem = this._idle.pop()\n      clearTimeout(idleItem.timeoutId)\n      const client = idleItem.client\n      const idleListener = idleItem.idleListener\n\n      return this._acquireClient(client, pendingItem, idleListener, false)\n    }\n    if (!this._isFull()) {\n      return this.newClient(pendingItem)\n    }\n    throw new Error('unexpected condition')\n  }\n\n  _remove(client) {\n    const removed = removeWhere(this._idle, (item) => item.client === client)\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId)\n    }\n\n    this._clients = this._clients.filter((c) => c !== client)\n    client.end()\n    this.emit('remove', client)\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n\n    const response = promisify(this.Promise, cb)\n    const result = response.result\n\n    // if we don't have to connect a new client, don't do so\n    if (this._clients.length >= this.options.max || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue())\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback))\n        return result\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid)\n        response.callback(err, res, done)\n      }\n\n      const pendingItem = new PendingItem(queueCallback)\n\n      // set connection timeout on checking out an existing client\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, (i) => i.callback === queueCallback)\n        pendingItem.timedOut = true\n        response.callback(new Error('timeout exceeded when trying to connect'))\n      }, this.options.connectionTimeoutMillis)\n\n      this._pendingQueue.push(pendingItem)\n      return result\n    }\n\n    this.newClient(new PendingItem(response.callback))\n\n    return result\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options)\n    this._clients.push(client)\n    const idleListener = makeIdleListener(this, client)\n\n    this.log('checking client timeout')\n\n    // connection timeout logic\n    let tid\n    let timeoutHit = false\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout')\n        timeoutHit = true\n        // force kill the node driver, and let libpq do its teardown\n        client.connection ? client.connection.stream.destroy() : client.end()\n      }, this.options.connectionTimeoutMillis)\n    }\n\n    this.log('connecting new client')\n    client.connect((err) => {\n      if (tid) {\n        clearTimeout(tid)\n      }\n      client.on('error', idleListener)\n      if (err) {\n        this.log('client failed to connect', err)\n        // remove the dead client from our list of clients\n        this._clients = this._clients.filter((c) => c !== client)\n        if (timeoutHit) {\n          err.message = 'Connection terminated due to connection timeout'\n        }\n\n        // this client wonâ€™t be released, so move on immediately\n        this._pulseQueue()\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP)\n        }\n      } else {\n        this.log('new client connected')\n\n        return this._acquireClient(client, pendingItem, idleListener, true)\n      }\n    })\n  }\n\n  // acquire a client for a pending work item\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client)\n    }\n\n    this.emit('acquire', client)\n\n    client.release = this._releaseOnce(client, idleListener)\n\n    client.removeListener('error', idleListener)\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, (err) => {\n          if (err) {\n            client.release(err)\n            return pendingItem.callback(err, undefined, NOOP)\n          }\n\n          pendingItem.callback(undefined, client, client.release)\n        })\n      } else {\n        pendingItem.callback(undefined, client, client.release)\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release)\n      } else {\n        client.release()\n      }\n    }\n  }\n\n  // returns a function that wraps _release and throws if called more than once\n  _releaseOnce(client, idleListener) {\n    let released = false\n\n    return (err) => {\n      if (released) {\n        throwOnDoubleRelease()\n      }\n\n      released = true\n      this._release(client, idleListener, err)\n    }\n  }\n\n  // release a client back to the poll, include an error\n  // to remove it from the pool\n  _release(client, idleListener, err) {\n    client.on('error', idleListener)\n\n    client._poolUseCount = (client._poolUseCount || 0) + 1\n\n    // TODO(bmc): expose a proper, public interface _queryable and _ending\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client')\n      }\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    // idle timeout\n    let tid\n    if (this.options.idleTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('remove idle client')\n        this._remove(client)\n      }, this.options.idleTimeoutMillis)\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid))\n    this._pulseQueue()\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text)\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'))\n      })\n      return response.result\n    }\n\n    // allow plain text query without values\n    if (typeof values === 'function') {\n      cb = values\n      values = undefined\n    }\n    const response = promisify(this.Promise, cb)\n    cb = response.callback\n\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err)\n      }\n\n      let clientReleased = false\n      const onError = (err) => {\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        cb(err)\n      }\n\n      client.once('error', onError)\n      this.log('dispatching query')\n      client.query(text, values, (err, res) => {\n        this.log('query dispatched')\n        client.removeListener('error', onError)\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        if (err) {\n          return cb(err)\n        } else {\n          return cb(undefined, res)\n        }\n      })\n    })\n    return response.result\n  }\n\n  end(cb) {\n    this.log('ending')\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n    this.ending = true\n    const promised = promisify(this.Promise, cb)\n    this._endCallback = promised.callback\n    this._pulseQueue()\n    return promised.result\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length\n  }\n\n  get idleCount() {\n    return this._idle.length\n  }\n\n  get totalCount() {\n    return this._clients.length\n  }\n}\nmodule.exports = Pool\n"]},"metadata":{},"sourceType":"script"}