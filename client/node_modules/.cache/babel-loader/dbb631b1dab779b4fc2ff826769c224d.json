{"ast":null,"code":"var _jsxFileName = \"/Users/nathanaelshim/Desktop/pixit/client/src/PixelEditor.js\";\nimport React, { Component } from 'react';\nimport Canvas from './Canvas';\nimport Pencil from './tools/Pencil';\nimport Pusher from 'pusher-js';\nimport pushid from 'pushid';\nimport axios from 'axios';\n\nclass PixelEditor extends Component {\n  constructor() {\n    super();\n\n    this.syncUpdates = () => {\n      const data = {\n        id: this.state.id,\n        pixels: this.state.editor.pixels\n      };\n      axios.post(\"/update-editor\", data).catch(err => {\n        console.log(err);\n      });\n      localStorage.setItem('pixelEditor', this.state.editor);\n    };\n\n    this.state = {\n      id: '',\n      editor: null\n    };\n    this.editorRef = React.createRef();\n    this.pusher = new Pusher(\"8367995d3f0fa627b261\", {\n      cluster: \"us3\",\n      forceTLS: true\n    });\n    this.channel = this.pusher.subscribe(\"editor\");\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('pixelEditor') !== null) {\n      this.setState({\n        editor: localStorage.getItem('pixelEditor')\n      });\n    } else if (this.editorRef.current) {\n      this.setState({\n        editor: new Canvas(this.editorRef.current, 64, 64, new Pencil('black'))\n      });\n    }\n\n    this.setState({\n      id: pushid()\n    });\n    this.channel.bind(\"code-update\", data => {\n      console.log(this.state.editor.pixels);\n      const {\n        id\n      } = this.state;\n      if (data.id === id) return;\n      this.state.editor.clear();\n      this.state.editor.set(data.pixels);\n    });\n  }\n\n  render() {\n    const {\n      editor\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      onClick: () => {\n        this.syncUpdates();\n      },\n      ref: this.editorRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        if (editor) editor.tool = new Pencil();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, \"Eraser\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        if (editor) editor.tool = new Pencil('black');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, \"Pencil\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        if (editor) editor.undo();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, \"Undo\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        if (editor) editor.redo();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"Redo\"));\n  }\n\n}\n\nexport default PixelEditor;","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/client/src/PixelEditor.js"],"names":["React","Component","Canvas","Pencil","Pusher","pushid","axios","PixelEditor","constructor","syncUpdates","data","id","state","pixels","editor","post","catch","err","console","log","localStorage","setItem","editorRef","createRef","pusher","cluster","forceTLS","channel","subscribe","componentDidMount","getItem","setState","current","bind","clear","set","render","tool","undo","redo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Canvas from './Canvas';\nimport Pencil from './tools/Pencil';\nimport Pusher from 'pusher-js';\nimport pushid from 'pushid';\nimport axios from 'axios';\n \nclass PixelEditor extends Component {\n    constructor() {\n        super();\n        this.state = {\n          id: '',\n          editor : null,\n        };\n        this.editorRef = React.createRef();\n        this.pusher = new Pusher(\"8367995d3f0fa627b261\", {\n          cluster: \"us3\",\n          forceTLS: true\n        });\n        this.channel = this.pusher.subscribe(\"editor\");\n    }\n    componentDidMount() {\n      if (localStorage.getItem('pixelEditor') !== null) {\n        this.setState({\n          editor : localStorage.getItem('pixelEditor')\n        })\n      } else if (this.editorRef.current) {\n        this.setState({\n          editor : new Canvas(this.editorRef.current, 64, 64, new Pencil('black')),\n        })\n      }\n      this.setState({\n        id: pushid(),\n      });\n      this.channel.bind(\"code-update\", data => {\n        console.log(this.state.editor.pixels);\n        const { id } = this.state;\n        if (data.id === id) return;\n        this.state.editor.clear();\n        this.state.editor.set(data.pixels);\n      });\n    }\n    \n    syncUpdates = () => {\n      const data = { \n          id: this.state.id,\n          pixels: this.state.editor.pixels,\n      };\n        axios\n        .post(\"/update-editor\", data)\n        .catch(err => {\n          console.log(err);\n        });\n        localStorage.setItem('pixelEditor', this.state.editor);\n    };\n\n    render() {\n        const { editor } = this.state;\n        return (\n          <div>\n            <canvas onClick={() => {\n              this.syncUpdates();\n            }} ref={this.editorRef} />\n            <button onClick={() => { if (editor) editor.tool = new Pencil() }}>Eraser</button>\n            <button onClick={() => { if (editor) editor.tool = new Pencil('black') }}>Pencil</button>\n            <button onClick={() => { if (editor) editor.undo() }}>Undo</button>\n            <button onClick={() => { if (editor) editor.redo() }}>Redo</button>\n          </div>\n        );\n    }\n}\n \nexport default PixelEditor;"]},"metadata":{},"sourceType":"module"}