{"ast":null,"code":"'use strict';\n\nvar types = require('pg-types');\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/; // result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\n\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null;\n    this.rowCount = null;\n    this.oid = null;\n    this.rows = [];\n    this.fields = [];\n    this._parsers = undefined;\n    this._types = types;\n    this.RowCtor = null;\n    this.rowAsArray = rowMode === 'array';\n\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray;\n    }\n  } // adds a command complete message\n\n\n  addCommandComplete(msg) {\n    var match;\n\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text);\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command);\n    }\n\n    if (match) {\n      this.command = match[1];\n\n      if (match[3]) {\n        // COMMMAND OID ROWS\n        this.oid = parseInt(match[2], 10);\n        this.rowCount = parseInt(match[3], 10);\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10);\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length);\n\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i];\n\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue);\n      } else {\n        row[i] = null;\n      }\n    }\n\n    return row;\n  }\n\n  parseRow(rowData) {\n    var row = {};\n\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i];\n      var field = this.fields[i].name;\n\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue);\n      } else {\n        row[field] = null;\n      }\n    }\n\n    return row;\n  }\n\n  addRow(row) {\n    this.rows.push(row);\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions;\n\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length);\n    }\n\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i];\n\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n      }\n    }\n  }\n\n}\n\nmodule.exports = Result;","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/node_modules/pg/lib/result.js"],"names":["types","require","matchRegexp","Result","constructor","rowMode","command","rowCount","oid","rows","fields","_parsers","undefined","_types","RowCtor","rowAsArray","parseRow","_parseRowAsArray","addCommandComplete","msg","match","text","exec","parseInt","rowData","row","Array","length","i","len","rawValue","field","name","addRow","push","addFields","fieldDescriptions","desc","getTypeParser","dataTypeID","format","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar types = require('pg-types')\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null\n    this.rowCount = null\n    this.oid = null\n    this.rows = []\n    this.fields = []\n    this._parsers = undefined\n    this._types = types\n    this.RowCtor = null\n    this.rowAsArray = rowMode === 'array'\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray\n    }\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    var match\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text)\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command)\n    }\n    if (match) {\n      this.command = match[1]\n      if (match[3]) {\n        // COMMMAND OID ROWS\n        this.oid = parseInt(match[2], 10)\n        this.rowCount = parseInt(match[3], 10)\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10)\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length)\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue)\n      } else {\n        row[i] = null\n      }\n    }\n    return row\n  }\n\n  parseRow(rowData) {\n    var row = {}\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      var field = this.fields[i].name\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue)\n      } else {\n        row[field] = null\n      }\n    }\n    return row\n  }\n\n  addRow(row) {\n    this.rows.push(row)\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length)\n    }\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i]\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      }\n    }\n  }\n}\n\nmodule.exports = Result\n"]},"metadata":{},"sourceType":"script"}