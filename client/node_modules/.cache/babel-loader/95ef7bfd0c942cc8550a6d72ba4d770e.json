{"ast":null,"code":"var _jsxFileName = \"/Users/nathanaelshim/Desktop/pixit/client/src/auth/Login.js\";\nimport React, { useState, useContext } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { withStyles, createStyles } from '@material-ui/styles';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { Button, Container, Box, Typography } from '@material-ui/core';\nimport { AuthContext } from '../context/AuthContext';\n\nconst Login = props => {\n  const classes = props.classes;\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [authSuccessful, setAuthSuccessful] = useState(true);\n  const history = useHistory();\n  const authContext = useContext(AuthContext);\n\n  const handleSubmit = async event => {\n    var _response;\n\n    event.preventDefault();\n    let response;\n\n    try {\n      response = await axios.post('/auth/login', JSON.stringify({\n        email,\n        password\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      authContext.setUser(response.data.path);\n    } catch (err) {\n      setAuthSuccessful(false);\n      console.log(err);\n      authContext.setUser(null);\n    }\n\n    if (response) {\n      setAuthSuccessful(response.data.authSuccessful);\n    }\n\n    if ((_response = response) === null || _response === void 0 ? void 0 : _response.data.path) window.location.href = response.data.path;else history.push('/login');\n  };\n\n  const handleEmailChange = event => setEmail(event.target.value);\n\n  const handlePasswordChange = event => setPassword(event.target.value);\n\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ValidatorForm, {\n    onSubmit: handleSubmit,\n    className: classes.formWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"email\",\n    label: \"Email address\",\n    className: classes.textBox,\n    onChange: handleEmailChange,\n    name: \"email\",\n    type: \"email\",\n    validators: ['required', 'isEmail'],\n    errorMessages: ['this field is required', 'email is not valid'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"password\",\n    label: \"Password\",\n    className: classes.textBox,\n    onChange: handlePasswordChange,\n    name: \"password\",\n    type: \"password\",\n    validators: ['required'],\n    errorMessages: ['this field is required'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }), authSuccessful === false && /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }, \"Sign in failed\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, \"Sign in\"))));\n};\n\nconst useStyles = theme => createStyles({\n  formWrapper: {\n    width: '350px',\n    display: 'flex',\n    flexDirection: 'column',\n    '& > *': {\n      marginBottom: '1rem'\n    }\n  },\n  textBox: {\n    display: 'flex'\n  }\n});\n\nexport default withStyles(useStyles)(Login);","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/client/src/auth/Login.js"],"names":["React","useState","useContext","axios","useHistory","withStyles","createStyles","ValidatorForm","TextValidator","Button","Container","Box","Typography","AuthContext","Login","props","classes","email","setEmail","password","setPassword","authSuccessful","setAuthSuccessful","history","authContext","handleSubmit","event","preventDefault","response","post","JSON","stringify","headers","setUser","data","path","err","console","log","window","location","href","push","handleEmailChange","target","value","handlePasswordChange","formWrapper","textBox","useStyles","theme","width","display","flexDirection","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react';\nimport axios from 'axios';\nimport {useHistory} from 'react-router-dom';\nimport {withStyles, createStyles} from '@material-ui/styles';\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport {\n    Button,\n    Container,\n    Box,\n    Typography,\n} from '@material-ui/core';\nimport {AuthContext} from '../context/AuthContext';\n\nconst Login = (props) => {\n    const classes = props.classes;\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [authSuccessful, setAuthSuccessful] = useState(true);\n    const history = useHistory();\n    const authContext = useContext(AuthContext);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        let response;\n        try {\n            response = await axios.post('/auth/login', JSON.stringify({email, password}), {\n                headers: {'Content-Type' : 'application/json'}\n            });\n            authContext.setUser(response.data.path);\n        } catch (err) {\n            setAuthSuccessful(false);\n            console.log(err);\n            authContext.setUser(null);\n        }\n        if (response) {\n            setAuthSuccessful(response.data.authSuccessful);\n        }\n        if (response?.data.path) window.location.href = response.data.path;\n        else history.push('/login');\n    }\n    \n    const handleEmailChange = (event) => setEmail(event.target.value);\n    const handlePasswordChange = (event) => setPassword(event.target.value);\n    \n    return(\n            <Box>\n            <Container maxWidth=\"md\">\n                <ValidatorForm\n                    onSubmit={handleSubmit}\n                    className={classes.formWrapper}\n                >\n                    <TextValidator\n                        id=\"email\"\n                        label=\"Email address\"\n                        className={classes.textBox}\n                        onChange={handleEmailChange}\n                        name=\"email\"\n                        type=\"email\"\n                        validators={['required', 'isEmail']}\n                        errorMessages={['this field is required', 'email is not valid']}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        value={email}\n                    />\n                    <TextValidator\n                        id=\"password\"\n                        label=\"Password\"\n                        className={classes.textBox}\n                        onChange={handlePasswordChange}\n                        name=\"password\"\n                        type=\"password\"\n                            validators={['required']}\n                            errorMessages={['this field is required']}\n                            variant=\"outlined\"\n                            size=\"small\"\n                            value={password}\n                        />\n                        {authSuccessful === false && (\n                            <Typography>Sign in failed</Typography>\n                        )}\n                        <Button type=\"submit\">Sign in</Button>\n                    </ValidatorForm>\n                </Container>\n            </Box>\n    )\n}\n\nconst useStyles = (theme) => createStyles({\n    formWrapper: {\n        width: '350px',\n        display: 'flex',\n        flexDirection: 'column',\n        '& > *': {\n            marginBottom: '1rem',\n        },\n    },\n    textBox: {\n        display: 'flex',\n    }\n});\n\nexport default withStyles(useStyles)(Login);"]},"metadata":{},"sourceType":"module"}