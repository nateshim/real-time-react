{"ast":null,"code":"var _jsxFileName = \"/Users/nathanaelshim/Desktop/pixit/client/src/auth/Signup.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { withStyles, createStyles } from '@material-ui/styles';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { Button, Container, Box, Typography } from '@material-ui/core';\n\nconst Signup = props => {\n  const classes = props.classes;\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const history = useHistory();\n\n  const handleSubmit = async event => {\n    var _response;\n\n    event.preventDefault();\n    let response;\n\n    try {\n      response = await axios.post('/auth/login', JSON.stringify({\n        username: email,\n        password\n      }));\n    } catch (err) {\n      console.log(err);\n    }\n\n    if ((_response = response) === null || _response === void 0 ? void 0 : _response.data.path) window.location.href = response.data.path;else history.push('/login');\n  };\n\n  const handleEmailChange = event => setEmail(event.target.value);\n\n  const handlePasswordChange = event => setPassword(event.target.value);\n\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: loginWithGoogle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Sign in with Google\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n    onSubmit: handleSubmit,\n    className: classes.formWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"username\",\n    label: \"Username\",\n    className: classes.textBox,\n    onChange: handleEmailChange,\n    name: \"username\",\n    validators: ['required'],\n    errorMessages: ['this field is required'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"email\",\n    label: \"Email address\",\n    className: classes.textBox,\n    onChange: handleEmailChange,\n    name: \"email\",\n    type: \"email\",\n    validators: ['required', 'isEmail'],\n    errorMessages: ['this field is required', 'email is not valid'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"password\",\n    label: \"Password\",\n    className: classes.textBox,\n    onChange: handlePasswordChange,\n    name: \"password\",\n    type: \"password\",\n    validators: ['required'],\n    errorMessages: ['this field is required'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"Sign in\")));\n};\n\nconst useStyles = theme => createStyles({\n  formWrapper: {\n    width: '350px',\n    display: 'flex',\n    flexDirection: 'column',\n    '& > *': {\n      marginBottom: '1rem'\n    }\n  },\n  textBox: {\n    display: 'flex'\n  }\n});\n\nexport default withStyles(useStyles)(Signup);","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/client/src/auth/Signup.js"],"names":["React","useState","axios","useHistory","withStyles","createStyles","ValidatorForm","TextValidator","Button","Container","Box","Typography","Signup","props","classes","username","setUsername","email","setEmail","password","setPassword","history","handleSubmit","event","preventDefault","response","post","JSON","stringify","err","console","log","data","path","window","location","href","push","handleEmailChange","target","value","handlePasswordChange","loginWithGoogle","formWrapper","textBox","useStyles","theme","width","display","flexDirection","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport axios from 'axios';\nimport {useHistory} from 'react-router-dom';\nimport {withStyles, createStyles} from '@material-ui/styles';\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport {\n    Button,\n    Container,\n    Box,\n    Typography,\n} from '@material-ui/core';\n\nconst Signup = (props) => {\n    const classes = props.classes;\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const history = useHistory();\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        let response;\n        try {\n            response = await axios.post('/auth/login', JSON.stringify({username: email, password}));\n        } catch (err) {\n            console.log(err);\n        }\n        if (response?.data.path) (window).location.href = response.data.path;\n        else history.push('/login');\n    }\n    \n    const handleEmailChange = (event) => setEmail(event.target.value);\n    const handlePasswordChange = (event) => setPassword(event.target.value);\n        \n    return(\n        <Container maxWidth=\"md\">\n            <Button onClick={loginWithGoogle}>\n                Sign in with Google\n            </Button>\n            <ValidatorForm\n                onSubmit={handleSubmit}\n                className={classes.formWrapper}\n            >\n                <TextValidator\n                    id=\"username\"\n                    label=\"Username\"\n                    className={classes.textBox}\n                    onChange={handleEmailChange}\n                    name=\"username\"\n                    validators={['required']}\n                    errorMessages={['this field is required']}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={email}\n                />\n                <TextValidator\n                    id=\"email\"\n                    label=\"Email address\"\n                    className={classes.textBox}\n                    onChange={handleEmailChange}\n                    name=\"email\"\n                    type=\"email\"\n                    validators={['required', 'isEmail']}\n                    errorMessages={['this field is required', 'email is not valid']}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={email}\n                />\n                <TextValidator\n                    id=\"password\"\n                    label=\"Password\"\n                    className={classes.textBox}\n                    onChange={handlePasswordChange}\n                    name=\"password\"\n                    type=\"password\"\n                    validators={['required']}\n                    errorMessages={['this field is required']}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={password}\n                />\n                <Button type=\"submit\">Sign in</Button>\n            </ValidatorForm>\n        </Container>\n    )\n}\n\nconst useStyles = (theme) => createStyles({\n    formWrapper: {\n        width: '350px',\n        display: 'flex',\n        flexDirection: 'column',\n        '& > *': {\n            marginBottom: '1rem',\n        },\n    },\n    textBox: {\n        display: 'flex',\n    }\n});\n\nexport default withStyles(useStyles)(Signup);"]},"metadata":{},"sourceType":"module"}