{"ast":null,"code":"'use strict'; // eslint-disable-next-line\n\nvar Native = require('pg-native');\n\nvar TypeOverrides = require('../type-overrides');\n\nvar pkg = require('../../package.json');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar ConnectionParameters = require('../connection-parameters');\n\nvar NativeQuery = require('./query');\n\nvar Client = module.exports = function (config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this._Promise = config.Promise || global.Promise;\n  this._types = new TypeOverrides(config.types);\n  this.native = new Native({\n    types: this._types\n  });\n  this._queryQueue = [];\n  this._ending = false;\n  this._connecting = false;\n  this._connected = false;\n  this._queryable = true; // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n\n  var cp = this.connectionParameters = new ConnectionParameters(config);\n  this.user = cp.user; // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password\n  });\n  this.database = cp.database;\n  this.host = cp.host;\n  this.port = cp.port; // a hash to hold named queries\n\n  this.namedQueries = {};\n};\n\nClient.Query = NativeQuery;\nutil.inherits(Client, EventEmitter);\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = query => {\n    process.nextTick(() => {\n      query.native = this.native;\n      query.handleError(err);\n    });\n  };\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery);\n    this._activeQuery = null;\n  }\n\n  this._queryQueue.forEach(enqueueError);\n\n  this._queryQueue.length = 0;\n}; // connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\n\n\nClient.prototype._connect = function (cb) {\n  var self = this;\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')));\n    return;\n  }\n\n  this._connecting = true;\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err);\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end();\n        return cb(err);\n      } // set internal states to connected\n\n\n      self._connected = true; // handle connection errors from the native layer\n\n      self.native.on('error', function (err) {\n        self._queryable = false;\n\n        self._errorAllQueries(err);\n\n        self.emit('error', err);\n      });\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra\n        });\n      }); // signal we are connected now\n\n      self.emit('connect');\n\n      self._pulseQueryQueue(true);\n\n      cb();\n    });\n  });\n};\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback);\n\n    return;\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect(error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n}; // send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\n\n\nClient.prototype.query = function (config, values, callback) {\n  var query;\n  var result;\n  var readTimeout;\n  var readTimeoutTimer;\n  var queryCallback;\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query');\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n    result = query = config; // accept query(new Query(...), (err, res) => { }) style\n\n    if (typeof values === 'function') {\n      config.callback = values;\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout;\n    query = new NativeQuery(config, values, callback);\n\n    if (!query.callback) {\n      let resolveOut, rejectOut;\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve;\n        rejectOut = reject;\n      });\n\n      query.callback = (err, res) => err ? rejectOut(err) : resolveOut(res);\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback;\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout');\n      process.nextTick(() => {\n        query.handleError(error, this.connection);\n      });\n      queryCallback(error); // we already returned an error,\n      // just do nothing if query completes\n\n      query.callback = () => {}; // Remove from queue\n\n\n      var index = this._queryQueue.indexOf(query);\n\n      if (index > -1) {\n        this._queryQueue.splice(index, 1);\n      }\n\n      this._pulseQueryQueue();\n    }, readTimeout);\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer);\n      queryCallback(err, res);\n    };\n  }\n\n  if (!this._queryable) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'));\n    });\n    return result;\n  }\n\n  if (this._ending) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'));\n    });\n    return result;\n  }\n\n  this._queryQueue.push(query);\n\n  this._pulseQueryQueue();\n\n  return result;\n}; // disconnect from the backend server\n\n\nClient.prototype.end = function (cb) {\n  var self = this;\n  this._ending = true;\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb));\n  }\n\n  var result;\n\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = err => err ? reject(err) : resolve();\n    });\n  }\n\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'));\n\n    process.nextTick(() => {\n      self.emit('end');\n      if (cb) cb();\n    });\n  });\n  return result;\n};\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end';\n};\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return;\n  }\n\n  if (this._hasActiveQuery()) {\n    return;\n  }\n\n  var query = this._queryQueue.shift();\n\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain');\n    }\n\n    return;\n  }\n\n  this._activeQuery = query;\n  query.submit(this);\n  var self = this;\n  query.once('_done', function () {\n    self._pulseQueryQueue();\n  });\n}; // attempt to cancel an in-progress query\n\n\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {});\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1);\n  }\n};\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format);\n};","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/node_modules/pg/lib/native/client.js"],"names":["Native","require","TypeOverrides","pkg","EventEmitter","util","ConnectionParameters","NativeQuery","Client","module","exports","config","call","_Promise","Promise","global","_types","types","native","_queryQueue","_ending","_connecting","_connected","_queryable","cp","connectionParameters","user","Object","defineProperty","configurable","enumerable","writable","value","password","database","host","port","namedQueries","Query","inherits","prototype","_errorAllQueries","err","enqueueError","query","process","nextTick","handleError","_hasActiveQuery","_activeQuery","forEach","length","_connect","cb","self","Error","getLibpqConnectionString","conString","connect","end","on","emit","msg","channel","relname","payload","extra","_pulseQueryQueue","callback","resolve","reject","error","values","result","readTimeout","readTimeoutTimer","queryCallback","undefined","TypeError","submit","query_timeout","resolveOut","rejectOut","res","setTimeout","connection","index","indexOf","splice","clearTimeout","push","once","bind","state","initialConnection","shift","cancel","setTypeParser","oid","format","parseFn","getTypeParser"],"mappings":"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","sourcesContent":["'use strict'\n\n// eslint-disable-next-line\nvar Native = require('pg-native')\nvar TypeOverrides = require('../type-overrides')\nvar pkg = require('../../package.json')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar ConnectionParameters = require('../connection-parameters')\n\nvar NativeQuery = require('./query')\n\nvar Client = (module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types,\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = (this.connectionParameters = new ConnectionParameters(config))\n  this.user = cp.user\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password,\n  })\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n})\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra,\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      })\n      query.callback = (err, res) => (err ? rejectOut(err) : resolveOut(res))\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  var result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => (err ? reject(err) : resolve())\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  var query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  var self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n"]},"metadata":{},"sourceType":"script"}