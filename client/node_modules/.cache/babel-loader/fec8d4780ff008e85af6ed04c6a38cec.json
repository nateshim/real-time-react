{"ast":null,"code":"var _jsxFileName = \"/Users/nathanaelshim/Desktop/pixit/client/src/auth/Signup.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Navigation from '../Navigation';\nimport { useHistory } from 'react-router-dom';\nimport { withStyles, createStyles } from '@material-ui/styles';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { Button, Container, Box, Typography } from '@material-ui/core';\n\nconst Signup = props => {\n  const classes = props.classes;\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [verifypassword, setVerifyPassword] = useState('');\n  const [signUpSucceeded, setSignUpSucceeded] = useState(true);\n  const [signUpFailedMsg, setSignUpFailedMsg] = useState('');\n  const history = useHistory();\n\n  const handleSubmit = async event => {\n    var _response;\n\n    event.preventDefault();\n    let response;\n\n    try {\n      response = await axios.post('/auth/signup', JSON.stringify({\n        username: username,\n        email,\n        password\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (response) {\n      setSignUpSucceeded(response.data.signUpSucceeded);\n      setSignUpFailedMsg(response.data.signUpFailedMsg);\n    }\n\n    if ((_response = response) === null || _response === void 0 ? void 0 : _response.data.path) window.location.href = response.data.path;else history.push('/signup');\n  };\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      return value === password;\n    });\n    return () => {\n      ValidatorForm.removeValidationRule('isPasswordMatch');\n    };\n  });\n\n  const handleUsernameChange = event => setUsername(event.target.value);\n\n  const handleEmailChange = event => setEmail(event.target.value);\n\n  const handlePasswordChange = event => setPassword(event.target.value);\n\n  const handleVerifyPasswordChange = event => setVerifyPassword(event.target.value);\n\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ValidatorForm, {\n    onSubmit: handleSubmit,\n    className: classes.formWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"username\",\n    label: \"Username\",\n    className: classes.textBox,\n    onChange: handleUsernameChange,\n    name: \"username\",\n    validators: ['required'],\n    errorMessages: ['this field is required'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"email\",\n    label: \"Email address\",\n    className: classes.textBox,\n    onChange: handleEmailChange,\n    name: \"email\",\n    type: \"email\",\n    validators: ['required', 'isEmail'],\n    errorMessages: ['this field is required', 'email is not valid'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"password\",\n    label: \"Password\",\n    className: classes.textBox,\n    onChange: handlePasswordChange,\n    name: \"password\",\n    type: \"password\",\n    validators: ['required', 'minStringLength: 10', 'matchRegexp:.*[A-Z]', 'matchRegexp:.*[0-9]', 'matchRegexp:.*[!@#$%^&*()~`+=?{}-]'],\n    errorMessages: ['this field is required', 'Use a minimum of 10 characters', 'Password must include at least one uppercase letter', 'Password must include at least one number', 'Password must include at least one special character(!@#$%^&*()~`+=?{}-)'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    id: \"verifypassword\",\n    label: \"Verify Password\",\n    className: classes.textBox,\n    onChange: handleVerifyPasswordChange,\n    name: \"verifypassword\",\n    type: \"password\",\n    validators: ['isPasswordMatch', 'required'],\n    errorMessages: ['Passwords do not match', 'this field is required'],\n    variant: \"outlined\",\n    size: \"small\",\n    value: verifypassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, \"Create account\"), signUpSucceeded === false && /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, signUpFailedMsg))));\n};\n\nconst useStyles = theme => createStyles({\n  formWrapper: {\n    width: '350px',\n    display: 'flex',\n    flexDirection: 'column',\n    '& > *': {\n      marginBottom: '1rem'\n    }\n  },\n  textBox: {\n    display: 'flex'\n  }\n});\n\nexport default withStyles(useStyles)(Signup);","map":{"version":3,"sources":["/Users/nathanaelshim/Desktop/pixit/client/src/auth/Signup.js"],"names":["React","useState","useEffect","axios","Navigation","useHistory","withStyles","createStyles","ValidatorForm","TextValidator","Button","Container","Box","Typography","Signup","props","classes","username","setUsername","email","setEmail","password","setPassword","verifypassword","setVerifyPassword","signUpSucceeded","setSignUpSucceeded","signUpFailedMsg","setSignUpFailedMsg","history","handleSubmit","event","preventDefault","response","post","JSON","stringify","headers","err","console","log","data","path","window","location","href","push","addValidationRule","value","removeValidationRule","handleUsernameChange","target","handleEmailChange","handlePasswordChange","handleVerifyPasswordChange","formWrapper","textBox","useStyles","theme","width","display","flexDirection","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport Navigation from '../Navigation';\nimport {useHistory} from 'react-router-dom';\nimport {withStyles, createStyles} from '@material-ui/styles';\nimport {ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport {\n    Button,\n    Container,\n    Box,\n    Typography,\n} from '@material-ui/core';\n\nconst Signup = (props) => {\n    const classes = props.classes;\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [verifypassword, setVerifyPassword] = useState('');\n    const [signUpSucceeded, setSignUpSucceeded] = useState(true);\n    const [signUpFailedMsg, setSignUpFailedMsg] = useState('');\n    const history = useHistory();\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        let response;\n        try {\n            response = await axios.post('/auth/signup', JSON.stringify({username: username, email, password}), {\n                headers: {'Content-Type' : 'application/json'}\n            });\n        } catch (err) {\n            console.log(err);\n        }\n        if (response) {\n            setSignUpSucceeded(response.data.signUpSucceeded);\n            setSignUpFailedMsg(response.data.signUpFailedMsg);\n        }\n        if (response?.data.path) window.location.href = response.data.path;\n        else history.push('/signup');\n    }\n    useEffect(() => {\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n            return value === password;\n        });\n        return () => {\n            ValidatorForm.removeValidationRule('isPasswordMatch');\n        };\n    });\n    const handleUsernameChange = (event) => setUsername(event.target.value);\n    const handleEmailChange = (event) => setEmail(event.target.value);\n    const handlePasswordChange = (event) => setPassword(event.target.value);\n    const handleVerifyPasswordChange = (event) => setVerifyPassword(event.target.value);\n    return(\n        <Box>\n            <Navigation/>\n            <Container maxWidth=\"md\">\n                <ValidatorForm\n                    onSubmit={handleSubmit}\n                    className={classes.formWrapper}\n                >\n                    <TextValidator\n                        id=\"username\"\n                        label=\"Username\"\n                        className={classes.textBox}\n                        onChange={handleUsernameChange}\n                        name=\"username\"\n                        validators={['required']}\n                        errorMessages={['this field is required']}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        value={username}\n                    />\n                    <TextValidator\n                        id=\"email\"\n                        label=\"Email address\"\n                        className={classes.textBox}\n                        onChange={handleEmailChange}\n                        name=\"email\"\n                        type=\"email\"\n                        validators={['required', 'isEmail']}\n                        errorMessages={['this field is required', 'email is not valid']}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        value={email}\n                    />\n                    <TextValidator\n                        id=\"password\"\n                        label=\"Password\"\n                        className={classes.textBox}\n                        onChange={handlePasswordChange}\n                        name=\"password\"\n                        type=\"password\"\n                        validators={[\n                            'required',\n                            'minStringLength: 10',\n                            'matchRegexp:.*[A-Z]',\n                            'matchRegexp:.*[0-9]',\n                            'matchRegexp:.*[!@#$%^&*()~`+=?{}-]',\n                        ]}\n                        errorMessages={[\n                            'this field is required',\n                            'Use a minimum of 10 characters',\n                            'Password must include at least one uppercase letter',\n                            'Password must include at least one number',\n                            'Password must include at least one special character(!@#$%^&*()~`+=?{}-)',\n                        ]}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        value={password}\n                    />\n                    <TextValidator\n                        id=\"verifypassword\"\n                        label=\"Verify Password\"\n                        className={classes.textBox}\n                        onChange={handleVerifyPasswordChange}\n                        name=\"verifypassword\"\n                        type=\"password\"\n                        validators={['isPasswordMatch', 'required']}\n                        errorMessages={['Passwords do not match','this field is required']}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        value={verifypassword}\n                    />\n                    <Button type=\"submit\">Create account</Button>\n                    {signUpSucceeded === false && (\n                        <Typography>\n                            {signUpFailedMsg}\n                        </Typography>\n                    )}\n                </ValidatorForm>\n            </Container>\n        </Box>\n    )\n}\n\nconst useStyles = (theme) => createStyles({\n    formWrapper: {\n        width: '350px',\n        display: 'flex',\n        flexDirection: 'column',\n        '& > *': {\n            marginBottom: '1rem',\n        },\n    },\n    textBox: {\n        display: 'flex',\n    }\n});\n\nexport default withStyles(useStyles)(Signup);"]},"metadata":{},"sourceType":"module"}